[{"title":"Java Annotation Tutorials","date":"2016-04-28T12:45:37.000Z","path":"2016/04/28/java-annotation/","text":"注：本文主要翻译自Lesson: Annotations，学习一下Java注解。 Annotations（注解）是一种元数据（metadata），用于描述一段程序但对程序的运行不产生直接影响。 注解有一些作用，其中包括： 为编译器提供信息——注解可以被编译器用于探测 errors 或者 suppress warnings。 编译时或部署时处理——软件处理注解后可生成代码，XML 文件等。 运行时处理——一些注解可以用于运行时检查。 Annotations基础注解的格式注解最简单的格式如下： 1@Entity @字符告知编译器接下来是一个注解，下面这个例子是一个名为Override的注解： 12@Overridevoid mySuperMethod() &#123; ... &#125; 注解还可以包含一些带命名或不带命名的元素，每个元素会有相应的 value： 12345@Author( name = \"Benjamin Franklin\", date = \"3/27/2003\")class MyClass() &#123; ... &#125; 或 12@SuppressWarnings(value = \"unchecked\")void myMethod() &#123; ... &#125; 如果只包含一个带命名的 value，那么这个 value 的 name 可以忽略： 12@SuppressWarnings(\"unchecked\")void myMethod() &#123; ... &#125; 如果注解里没有元素，那么括号可以被省略，参考前面的@Override示例。 对于同一个声明，可以用多个注解： 123@Author(name = \"Jane Doe\")@EBookclass MyClass &#123; ... &#125; 如果注解的类型相同，这种情况被称为重复注解（repeating annotation）： 123@Author(name = \"Jane Doe\")@Author(name = \"John Smith\")class MyClass &#123; ... &#125; 重复注解自 Java 8 开始支持，详见 Repeating Annotations 部分。 注解的类型可以是java.lang或java.lang.annotation包下面定义的类型，比如前面例子中的Override和SuppressWarnings就是 Java 预置的注解类型。此外还可以自定义注解类型，如前面例子中的Author和Ebook。 注解可以用在什么地方注解可以用于声明类、域、方法和其他程序的元素，当用于声明时，注解往往自成一行。 从 Java 8 开始，注解还可作为类型（type），如下： 创建类的实例： 1new @Interned MyObject(); 转型： 1myString = (@NonNull String) str; 实现接口： 12class UnmodifiableList&lt;T&gt; implements @Readonly List&lt;@Readonly T&gt; &#123; ... &#125; 抛异常的声明： 12void monitorTemperature() throws @Critical TemperatureException &#123; ... &#125; 这种形式的注解被称为类型注解（type annotation）。 声明一个注解类型在代码中很多注解代替了注释（comments）。 比如，一个开发团队通常在一个类的 body 起始的位置添加一些重要的注释： 123456789101112public class Generation3List extends Generation2List &#123; // Author: John Doe // Date: 3/17/2002 // Current revision: 6 // Last modified: 4/12/2004 // By: Jane Doe // Reviewers: Alice, Bill, Cindy // class code goes here&#125; 如果使用注解的话，首先要定义一个注解类型，语法如下： 123456789@interface ClassPreamble &#123; String author(); String date(); int currentRevision() default 1; String lastModified() default \"N/A\"; String lastModifiedBy() default \"N/A\"; // Note use of array String[] reviewers();&#125; 注解的定义和接口的定义有些像，interface前面多了个@。 上面这个注解的定义中包括了注解类型和元素声明，其中 default 值是可选的。 定义好注解之后，我们可以像下面这样使用它： 1234567891011121314@ClassPreamble ( author = \"John Doe\", date = \"3/17/2002\", currentRevision = 6, lastModified = \"4/12/2004\", lastModifiedBy = \"Jane Doe\", // Note array notation reviewers = &#123;\"Alice\", \"Bob\", \"Cindy\"&#125;)public class Generation3List extends Generation2List &#123;// class code goes here&#125; Note：为了让 Java Doc 包含注解@ClassPreamble的信息，我们需要在定义@ClassPreamble时为它再加上注解@Documented： 12345678910&gt;// import this to use @Documented&gt;import java.lang.annotation.*;&gt;@Documented&gt;@interface ClassPreamble &#123;&gt; // Annotation element definitions &gt;&#125;&gt; 预置的注解类型Java API 中预定义了一些注解类型，一些用于编译器，还有一些用于其它注解。 Java使用的注解类型java.lang中预置的注解有：@Deprecated, @Override, 和 @SuppressWarnings。 @Deprecated\u0001注解表示被标记的元素是deprecated的，不建议再使用的元素。当程序使用了被@Deprecated注解的方法、类或域时，编译器会生成一个warning信息。当一个元素是deprecated，在Javadoc中也要使用@deprecated标记，Doc中的d小写，注解中是大写的D： 12345678 // Javadoc comment follows /** * @deprecated * explanation of why it was deprecated */ @Deprecated static void deprecatedMethod() &#123; &#125;&#125; @Override注解告诉编译器，该方法是重写自父类的方法： 1234// mark method as a superclass method // that has been overridden @Override int overriddenMethod() &#123; &#125; 用@Override的好处是如果这个方法没用正确重写父类的方法时，编译器会产生一个 error 提示。 @SuppressWarnings注解提示编译器不用产生指定的 warning 信息，如调用一个 deprecated 方法时，编译器会生成一个 waring 提示，使用@SuppressWarnings注解后，这个 waring 就被抑制了： 12345678// use a deprecated method and tell // compiler not to generate a warning @SuppressWarnings(\"deprecation\") void useDeprecatedMethod() &#123; // deprecation warning // - suppressed objectOne.deprecatedMethod(); &#125; @SafeVarargs用于方法或构造器时，断言可变参数不会产生潜在的危险，由可变参数使用而产生的 warning 会被 suppressed。 @FunctionalInterface是Java 8引入的，表示函数式接口。 注解的注解用于其它注解的注解，被称为元注解（meta-annotations），下面设计java.lang.annotation包里的相关注解。 @Retention指定了注解的保留方式： RetentionPolicy.SOURCE – 被标记的注解只保留在源码级别，会被编译器忽略。 RetentionPolicy.CLASS – 被标记的注解保留至编译时，会被JVM忽略。 RetentionPolicy.RUNTIME – 被标记的注解被JVM保留，会用于运行时环境。 @Documented注解信息会被 Javadoc 工具写入文档。 @Target起限制作用，表示注解用于描述哪种 Java 元素： ElementType.ANNOTATION_TYPE 用于描述注解 ElementType.CONSTRUCTOR 用于描述构造器 ElementType.FIELD 用于描述域 ElementType.LOCAL_VARIABLE 用于描述局部变量 ElementType.METHOD 用于描述方法的注解 ElementType.PACKAGE 用于描述包 ElementType.PARAMETER 用于描述参数 ElementType.TYPE 用于描述一个类的任何元素 @Inherited表示该注解是可以被继承的，只能用于声明类。 @Repeatable在Java 8引入，表示被标记的注解可以被重复用于同一个声明。 扩展阅读： Type Annotations and Pluggable Type Systems Repeating Annotations Java中的注解是如何工作的？","content":"<blockquote>\n<p>注：本文主要翻译自<a href=\"https://docs.oracle.com/javase/tutorial/java/annotations/index.html\" target=\"_blank\" rel=\"external\">Lesson: Annotations</a>，学习一下Java注解。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>Annotations（注解）是一种元数据（metadata），用于描述一段程序但对程序的运行不产生直接影响。</p>\n<p>注解有一些作用，其中包括：</p>\n<ul>\n<li>为编译器提供信息——注解可以被编译器用于探测 errors 或者 suppress warnings。</li>\n<li>编译时或部署时处理——软件处理注解后可生成代码，XML 文件等。</li>\n<li>运行时处理——一些注解可以用于运行时检查。</li>\n</ul>\n<h2 id=\"Annotations基础\"><a href=\"#Annotations基础\" class=\"headerlink\" title=\"Annotations基础\"></a>Annotations基础</h2><h3 id=\"注解的格式\"><a href=\"#注解的格式\" class=\"headerlink\" title=\"注解的格式\"></a>注解的格式</h3><p>注解最简单的格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Entity</div></pre></td></tr></table></figure>\n<p><code>@</code>字符告知编译器接下来是一个注解，下面这个例子是一个名为<code>Override</code>的注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mySuperMethod</span><span class=\"params\">()</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>注解还可以包含一些带命名或不带命名的元素，每个元素会有相应的 value：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Author</span>(</div><div class=\"line\">   name = <span class=\"string\">\"Benjamin Franklin\"</span>,</div><div class=\"line\">   date = <span class=\"string\">\"3/27/2003\"</span></div><div class=\"line\">)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span>() </span>&#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(value = <span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myMethod</span><span class=\"params\">()</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>如果只包含一个带命名的 value，那么这个 value 的 name 可以忽略：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myMethod</span><span class=\"params\">()</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>如果注解里没有元素，那么括号可以被省略，参考前面的<code>@Override</code>示例。</p>\n<p>对于同一个声明，可以用多个注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Author</span>(name = <span class=\"string\">\"Jane Doe\"</span>)</div><div class=\"line\"><span class=\"meta\">@EBook</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>如果注解的类型相同，这种情况被称为重复注解（repeating annotation）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Author</span>(name = <span class=\"string\">\"Jane Doe\"</span>)</div><div class=\"line\"><span class=\"meta\">@Author</span>(name = <span class=\"string\">\"John Smith\"</span>)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>\n<p>重复注解自 Java 8 开始支持，详见 Repeating Annotations 部分。</p>\n<p>注解的类型可以是<code>java.lang</code>或<code>java.lang.annotation</code>包下面定义的类型，比如前面例子中的<code>Override</code>和<code>SuppressWarnings</code>就是 Java 预置的注解类型。此外还可以自定义注解类型，如前面例子中的<code>Author</code>和<code>Ebook</code>。</p>\n<h3 id=\"注解可以用在什么地方\"><a href=\"#注解可以用在什么地方\" class=\"headerlink\" title=\"注解可以用在什么地方\"></a>注解可以用在什么地方</h3><p>注解可以用于声明类、域、方法和其他程序的元素，当用于声明时，注解往往自成一行。</p>\n<p>从 Java 8 开始，注解还可作为类型（type），如下：</p>\n<ul>\n<li><p>创建类的实例：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"meta\">@Interned</span> MyObject();</div></pre></td></tr></table></figure>\n</li>\n<li><p>转型：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">myString = (<span class=\"meta\">@NonNull</span> String) str;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>实现接口：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnmodifiableList</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span></span></div><div class=\"line\">       @<span class=\"title\">Readonly</span> <span class=\"title\">List</span>&lt;@<span class=\"title\">Readonly</span> <span class=\"title\">T</span>&gt; &#123; ... &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>抛异常的声明：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">monitorTemperature</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span></span></div><div class=\"line\">       @Critical TemperatureException &#123; ... &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这种形式的注解被称为类型注解（type annotation）。</p>\n<h2 id=\"声明一个注解类型\"><a href=\"#声明一个注解类型\" class=\"headerlink\" title=\"声明一个注解类型\"></a>声明一个注解类型</h2><p>在代码中很多注解代替了注释（comments）。</p>\n<p>比如，一个开发团队通常在一个类的 body 起始的位置添加一些重要的注释：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Generation3List</span> <span class=\"keyword\">extends</span> <span class=\"title\">Generation2List</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// Author: John Doe</span></div><div class=\"line\">   <span class=\"comment\">// Date: 3/17/2002</span></div><div class=\"line\">   <span class=\"comment\">// Current revision: 6</span></div><div class=\"line\">   <span class=\"comment\">// Last modified: 4/12/2004</span></div><div class=\"line\">   <span class=\"comment\">// By: Jane Doe</span></div><div class=\"line\">   <span class=\"comment\">// Reviewers: Alice, Bill, Cindy</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// class code goes here</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果使用注解的话，首先要定义一个注解类型，语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@interface</span> ClassPreamble &#123;</div><div class=\"line\">   <span class=\"function\">String <span class=\"title\">author</span><span class=\"params\">()</span></span>;</div><div class=\"line\">   <span class=\"function\">String <span class=\"title\">date</span><span class=\"params\">()</span></span>;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">currentRevision</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 1</span>;</div><div class=\"line\">   <span class=\"function\">String <span class=\"title\">lastModified</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"N/A\"</span>;</div><div class=\"line\">   <span class=\"function\">String <span class=\"title\">lastModifiedBy</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"N/A\"</span>;</div><div class=\"line\">   <span class=\"comment\">// Note use of array</span></div><div class=\"line\">   String[] reviewers();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注解的定义和接口的定义有些像，<code>interface</code>前面多了个<code>@</code>。</p>\n<p>上面这个注解的定义中包括了注解类型和元素声明，其中 default 值是可选的。</p>\n<p>定义好注解之后，我们可以像下面这样使用它：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ClassPreamble</span> (</div><div class=\"line\">   author = <span class=\"string\">\"John Doe\"</span>,</div><div class=\"line\">   date = <span class=\"string\">\"3/17/2002\"</span>,</div><div class=\"line\">   currentRevision = <span class=\"number\">6</span>,</div><div class=\"line\">   lastModified = <span class=\"string\">\"4/12/2004\"</span>,</div><div class=\"line\">   lastModifiedBy = <span class=\"string\">\"Jane Doe\"</span>,</div><div class=\"line\">   <span class=\"comment\">// Note array notation</span></div><div class=\"line\">   reviewers = &#123;<span class=\"string\">\"Alice\"</span>, <span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Cindy\"</span>&#125;</div><div class=\"line\">)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Generation3List</span> <span class=\"keyword\">extends</span> <span class=\"title\">Generation2List</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// class code goes here</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Note：为了让 Java Doc 包含注解<code>@ClassPreamble</code>的信息，我们需要在定义<code>@ClassPreamble</code>时为它再加上注解<code>@Documented</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"comment\">// import this to use @Documented</span></div><div class=\"line\">&gt;<span class=\"keyword\">import</span> java.lang.annotation.*;</div><div class=\"line\"></div><div class=\"line\">&gt;<span class=\"meta\">@Documented</span></div><div class=\"line\">&gt;<span class=\"meta\">@interface</span> ClassPreamble &#123;</div><div class=\"line\"></div><div class=\"line\">&gt;   <span class=\"comment\">// Annotation element definitions</span></div><div class=\"line\">   </div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"预置的注解类型\"><a href=\"#预置的注解类型\" class=\"headerlink\" title=\"预置的注解类型\"></a>预置的注解类型</h2><p>Java API 中预定义了一些注解类型，一些用于编译器，还有一些用于其它注解。</p>\n<h3 id=\"Java使用的注解类型\"><a href=\"#Java使用的注解类型\" class=\"headerlink\" title=\"Java使用的注解类型\"></a>Java使用的注解类型</h3><p><code>java.lang</code>中预置的注解有：<code>@Deprecated</code>, <code>@Override</code>, 和 <code>@SuppressWarnings</code>。</p>\n<p><strong><code>@Deprecated</code>\u0001</strong>注解表示被标记的元素是deprecated的，不建议再使用的元素。当程序使用了被<code>@Deprecated</code>注解的方法、类或域时，编译器会生成一个warning信息。当一个元素是deprecated，在Javadoc中也要使用@deprecated标记，Doc中的<em>d</em>小写，注解中是大写的<em>D</em>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">// Javadoc comment follows</span></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * <span class=\"doctag\">@deprecated</span></div><div class=\"line\">     * explanation of why it was deprecated</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@Deprecated</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deprecatedMethod</span><span class=\"params\">()</span> </span>&#123; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong><code>@Override</code></strong>注解告诉编译器，该方法是重写自父类的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// mark method as a superclass method</span></div><div class=\"line\">   <span class=\"comment\">// that has been overridden</span></div><div class=\"line\">   <span class=\"meta\">@Override</span> </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">overriddenMethod</span><span class=\"params\">()</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>\n<p>用<code>@Override</code>的好处是如果这个方法没用正确重写父类的方法时，编译器会产生一个 error 提示。</p>\n<p><strong><code>@SuppressWarnings</code></strong>注解提示编译器不用产生指定的 warning 信息，如调用一个 deprecated 方法时，编译器会生成一个 waring 提示，使用@SuppressWarnings注解后，这个 waring 就被抑制了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// use a deprecated method and tell </span></div><div class=\"line\">   <span class=\"comment\">// compiler not to generate a warning</span></div><div class=\"line\">   <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"deprecation\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">useDeprecatedMethod</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// deprecation warning</span></div><div class=\"line\">        <span class=\"comment\">// - suppressed</span></div><div class=\"line\">        objectOne.deprecatedMethod();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong><code>@SafeVarargs</code></strong>用于方法或构造器时，断言可变参数不会产生潜在的危险，由可变参数使用而产生的 warning 会被 suppressed。</p>\n<p><strong><code>@FunctionalInterface</code></strong>是Java 8引入的，表示函数式接口。</p>\n<h3 id=\"注解的注解\"><a href=\"#注解的注解\" class=\"headerlink\" title=\"注解的注解\"></a>注解的注解</h3><p>用于其它注解的注解，被称为元注解（meta-annotations），下面设计<code>java.lang.annotation</code>包里的相关注解。</p>\n<p><strong><code>@Retention</code></strong>指定了注解的保留方式：</p>\n<ul>\n<li>RetentionPolicy.SOURCE – 被标记的注解只保留在源码级别，会被编译器忽略。</li>\n<li>RetentionPolicy.CLASS – 被标记的注解保留至编译时，会被JVM忽略。</li>\n<li>RetentionPolicy.RUNTIME – 被标记的注解被JVM保留，会用于运行时环境。</li>\n</ul>\n<p><strong><code>@Documented</code></strong>注解信息会被 Javadoc 工具写入文档。</p>\n<p><strong><code>@Target</code></strong>起限制作用，表示注解用于描述哪种 Java 元素：</p>\n<ul>\n<li>ElementType.ANNOTATION_TYPE 用于描述注解</li>\n<li>ElementType.CONSTRUCTOR 用于描述构造器</li>\n<li>ElementType.FIELD 用于描述域</li>\n<li>ElementType.LOCAL_VARIABLE 用于描述局部变量</li>\n<li>ElementType.METHOD 用于描述方法的注解</li>\n<li>ElementType.PACKAGE 用于描述包</li>\n<li>ElementType.PARAMETER 用于描述参数</li>\n<li>ElementType.TYPE 用于描述一个类的任何元素</li>\n</ul>\n<p><strong><code>@Inherited</code></strong>表示该注解是可以被继承的，只能用于声明类。</p>\n<p><strong><code>@Repeatable</code></strong>在Java 8引入，表示被标记的注解可以被重复用于同一个声明。</p>\n<hr>\n<p>扩展阅读：</p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/annotations/type_annotations.html\" target=\"_blank\" rel=\"external\">Type Annotations and Pluggable Type Systems</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html\" target=\"_blank\" rel=\"external\">Repeating Annotations</a></li>\n<li><a href=\"http://www.importnew.com/10294.html\" target=\"_blank\" rel=\"external\">Java中的注解是如何工作的？</a></li>\n</ul>\n","tags":[{"name":"Java","slug":"Java","permalink":"https://kodyan.github.io/tags/Java/"}]},{"title":"Linux命令笔记","date":"2015-09-07T09:02:16.000Z","path":"2015/09/07/Linux-command/","text":"打印文件的第n行sed -n -e &apos;np&apos; filename 对含有形如key,value的数据按value排序将排序结果写回原文件： sort -t &quot;,&quot; -n -r -k2 filename -o filename 统计当前目录下Java文件行数find . -name &quot;*.java&quot; |xargs cat|grep -v ^$|wc -l 打印内容中包含某字符串的文件名例如打印包含bitmap size exceeds VM budget的文件的文件名 find .|xargs grep -ri &quot;bitmap size exceeds VM budget&quot; -l 提取逗号分隔的某一列例如file的内容如下： a,2b,1c,3d,4 提取出第一列： abcd 则执行： cut -d&apos;,&apos; -f1 file 按每行字符串长度排序cat file | while read i;do echo ${#i},$i;done | sort -nr|cut -f2 -d&apos;,&apos;","content":"<h2 id=\"打印文件的第n行\"><a href=\"#打印文件的第n行\" class=\"headerlink\" title=\"打印文件的第n行\"></a>打印文件的第n行</h2><pre><code>sed -n -e &apos;np&apos; filename\n</code></pre><h2 id=\"对含有形如key-value的数据按value排序\"><a href=\"#对含有形如key-value的数据按value排序\" class=\"headerlink\" title=\"对含有形如key,value的数据按value排序\"></a>对含有形如key,value的数据按value排序</h2><p>将排序结果写回原文件：</p>\n<pre><code>sort -t &quot;,&quot; -n -r -k2 filename -o filename\n</code></pre><h2 id=\"统计当前目录下Java文件行数\"><a href=\"#统计当前目录下Java文件行数\" class=\"headerlink\" title=\"统计当前目录下Java文件行数\"></a>统计当前目录下Java文件行数</h2><pre><code>find . -name &quot;*.java&quot; |xargs cat|grep -v ^$|wc -l\n</code></pre><h2 id=\"打印内容中包含某字符串的文件名\"><a href=\"#打印内容中包含某字符串的文件名\" class=\"headerlink\" title=\"打印内容中包含某字符串的文件名\"></a>打印内容中包含某字符串的文件名</h2><p>例如打印包含<code>bitmap size exceeds VM budget</code>的文件的文件名</p>\n<pre><code>find .|xargs grep -ri &quot;bitmap size exceeds VM budget&quot; -l\n</code></pre><a id=\"more\"></a>\n<h2 id=\"提取逗号分隔的某一列\"><a href=\"#提取逗号分隔的某一列\" class=\"headerlink\" title=\"提取逗号分隔的某一列\"></a>提取逗号分隔的某一列</h2><p>例如<em>file</em>的内容如下：</p>\n<blockquote>\n<p>a,2<br>b,1<br>c,3<br>d,4</p>\n</blockquote>\n<p>提取出第一列：</p>\n<blockquote>\n<p>a<br>b<br>c<br>d</p>\n</blockquote>\n<p>则执行：</p>\n<pre><code>cut -d&apos;,&apos; -f1 file\n</code></pre><h2 id=\"按每行字符串长度排序\"><a href=\"#按每行字符串长度排序\" class=\"headerlink\" title=\"按每行字符串长度排序\"></a>按每行字符串长度排序</h2><pre><code>cat file | while read i;do echo ${#i},$i;done | sort -nr|cut -f2 -d&apos;,&apos;\n</code></pre>","tags":[{"name":"Linux","slug":"Linux","permalink":"https://kodyan.github.io/tags/Linux/"}]}]